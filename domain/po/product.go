//Package po generated by 'freedom new-po'
package po

import (
	"github.com/jinzhu/gorm"
)

// Product .
type Product struct {
	changes map[string]interface{}
	ID      int    `gorm:"primary_key;column:id"`
	Price   int    `gorm:"column:price"`
	Desc    string `gorm:"column:desc"`
	Test    int    `gorm:"column:test"`
}

// TableName .
func (obj *Product) TableName() string {
	return "product"
}

// TakeChanges .
func (obj *Product) TakeChanges() map[string]interface{} {
	if obj.changes == nil {
		return nil
	}
	result := make(map[string]interface{})
	for k, v := range obj.changes {
		result[k] = v
	}
	obj.changes = nil
	return result
}

// updateChanges .
func (obj *Product) setChanges(name string, value interface{}) {
	if obj.changes == nil {
		obj.changes = make(map[string]interface{})
	}
	obj.changes[name] = value
}

// SetPrice .
func (obj *Product) SetPrice(price int) {
	obj.Price = price
	obj.setChanges("price", price)
}

// SetDesc .
func (obj *Product) SetDesc(desc string) {
	obj.Desc = desc
	obj.setChanges("desc", desc)
}

// SetTest .
func (obj *Product) SetTest(test int) {
	obj.Test = test
	obj.setChanges("test", test)
}

// AddPrice .
func (obj *Product) AddPrice(price int) {
	obj.Price += price
	obj.setChanges("price", gorm.Expr("price + ?", price))
}

// AddTest .
func (obj *Product) AddTest(test int) {
	obj.Test += test
	obj.setChanges("test", gorm.Expr("test + ?", test))
}
