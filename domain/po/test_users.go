//Package po generated by 'freedom new-po'
package po

import (
	"time"

	"github.com/jinzhu/gorm"
)

// TestUsers .
type TestUsers struct {
	changes   map[string]interface{}
	ID        int       `gorm:"primary_key;column:id"`
	CreatedAt time.Time `gorm:"column:created_at"`
	UpdatedAt time.Time `gorm:"column:updated_at"`
	DeletedAt time.Time `gorm:"column:deleted_at"`
	UserName  string    `gorm:"column:user_name"`
	Password  string    `gorm:"column:password"`
	Age       int       `gorm:"column:age"`
	Status    int       `gorm:"column:status"`
}

// TableName .
func (obj *TestUsers) TableName() string {
	return "test_users"
}

// TakeChanges .
func (obj *TestUsers) TakeChanges() map[string]interface{} {
	if obj.changes == nil {
		return nil
	}
	result := make(map[string]interface{})
	for k, v := range obj.changes {
		result[k] = v
	}
	obj.changes = nil
	return result
}

// updateChanges .
func (obj *TestUsers) setChanges(name string, value interface{}) {
	if obj.changes == nil {
		obj.changes = make(map[string]interface{})
	}
	obj.changes[name] = value
}

// SetCreatedAt .
func (obj *TestUsers) SetCreatedAt(createdAt time.Time) {
	obj.CreatedAt = createdAt
	obj.setChanges("created_at", createdAt)
}

// SetUpdatedAt .
func (obj *TestUsers) SetUpdatedAt(updatedAt time.Time) {
	obj.UpdatedAt = updatedAt
	obj.setChanges("updated_at", updatedAt)
}

// SetDeletedAt .
func (obj *TestUsers) SetDeletedAt(deletedAt time.Time) {
	obj.DeletedAt = deletedAt
	obj.setChanges("deleted_at", deletedAt)
}

// SetUserName .
func (obj *TestUsers) SetUserName(userName string) {
	obj.UserName = userName
	obj.setChanges("user_name", userName)
}

// SetPassword .
func (obj *TestUsers) SetPassword(password string) {
	obj.Password = password
	obj.setChanges("password", password)
}

// SetAge .
func (obj *TestUsers) SetAge(age int) {
	obj.Age = age
	obj.setChanges("age", age)
}

// SetStatus .
func (obj *TestUsers) SetStatus(status int) {
	obj.Status = status
	obj.setChanges("status", status)
}

// AddAge .
func (obj *TestUsers) AddAge(age int) {
	obj.Age += age
	obj.setChanges("age", gorm.Expr("age + ?", age))
}

// AddStatus .
func (obj *TestUsers) AddStatus(status int) {
	obj.Status += status
	obj.setChanges("status", gorm.Expr("status + ?", status))
}
