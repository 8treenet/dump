//Package po generated by 'freedom new-po'
package po

import (
	"github.com/jinzhu/gorm"
	"time"
)

// TestEmails .
type TestEmails struct {
	changes    map[string]interface{}
	ID         int       `gorm:"primary_key;column:id"`
	CreatedAt  time.Time `gorm:"column:created_at"`
	UpdatedAt  time.Time `gorm:"column:updated_at"`
	DeletedAt  time.Time `gorm:"column:deleted_at"`
	TypeID     int       `gorm:"column:type_id"`
	Subscribed int       `gorm:"column:subscribed"`
	TestUserID int       `gorm:"column:test_user_id"`
}

// TableName .
func (obj *TestEmails) TableName() string {
	return "test_emails"
}

// TakeChanges .
func (obj *TestEmails) TakeChanges() map[string]interface{} {
	if obj.changes == nil {
		return nil
	}
	result := make(map[string]interface{})
	for k, v := range obj.changes {
		result[k] = v
	}
	obj.changes = nil
	return result
}

// updateChanges .
func (obj *TestEmails) setChanges(name string, value interface{}) {
	if obj.changes == nil {
		obj.changes = make(map[string]interface{})
	}
	obj.changes[name] = value
}

// SetCreatedAt .
func (obj *TestEmails) SetCreatedAt(createdAt time.Time) {
	obj.CreatedAt = createdAt
	obj.setChanges("created_at", createdAt)
}

// SetUpdatedAt .
func (obj *TestEmails) SetUpdatedAt(updatedAt time.Time) {
	obj.UpdatedAt = updatedAt
	obj.setChanges("updated_at", updatedAt)
}

// SetDeletedAt .
func (obj *TestEmails) SetDeletedAt(deletedAt time.Time) {
	obj.DeletedAt = deletedAt
	obj.setChanges("deleted_at", deletedAt)
}

// SetTypeID .
func (obj *TestEmails) SetTypeID(typeID int) {
	obj.TypeID = typeID
	obj.setChanges("type_id", typeID)
}

// SetSubscribed .
func (obj *TestEmails) SetSubscribed(subscribed int) {
	obj.Subscribed = subscribed
	obj.setChanges("subscribed", subscribed)
}

// SetTestUserID .
func (obj *TestEmails) SetTestUserID(testUserID int) {
	obj.TestUserID = testUserID
	obj.setChanges("test_user_id", testUserID)
}

// AddTypeID .
func (obj *TestEmails) AddTypeID(typeID int) {
	obj.TypeID += typeID
	obj.setChanges("type_id", gorm.Expr("type_id + ?", typeID))
}

// AddSubscribed .
func (obj *TestEmails) AddSubscribed(subscribed int) {
	obj.Subscribed += subscribed
	obj.setChanges("subscribed", gorm.Expr("subscribed + ?", subscribed))
}

// AddTestUserID .
func (obj *TestEmails) AddTestUserID(testUserID int) {
	obj.TestUserID += testUserID
	obj.setChanges("test_user_id", gorm.Expr("test_user_id + ?", testUserID))
}
